// Problem Link : https://codeforces.com/contest/2044/problem/G1
// how to mark the cycle component in a functional graph in a good way 
we can also use kahns algo 

int main()
{
    int t;
    cin>>t;
    while(t--)
    {
        int n;
        cin>>n;
        vector<int> vec(n+1);
        for(int i=1; i<=n; i++)
            cin>>vec[i];

        vector<int> vis(n+1);
        vector<int> dst(n+1);
        int ans=0;
        for(int i=1; i<=n; i++)
        {
            int node=i;
            while(!vis[node])                                 // starting at an arbitrary node and going all the way which will finish in a cycle 
            {
                vis[node]=1;                                  
                node=vec[node];
            }
            while(vis[node]==1)
            {
                vis[node]=2;                              // after we are inside a cycle we can do one extra iteration to mark the cycle component with different marker which is 2 for example
                node=vec[node];
            }
            stack <int> st;
            node=i;
            while(vis[node]==1)                           // we want to know the distance from each node to the cycle so we start from the closest one beauce we know its answer must be 1 
            {
                st.push(node);                        
                node=vec[node];
            }
            while(!st.empty())
            {
                int v=st.top();st.pop();            // we mark the node in different marker so when ever we encounter it we know that we calcualted it before and when ever we stop in it in the future we know that it's not part of cycle but it has a part of the total distance
                vis[v]=3;
                dst[v]=dst[vec[v]]+1;
                ans=max(ans,dst[v]);
            }
        }
        cout<<ans+2<<"\n";
    }






}
