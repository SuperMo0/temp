
#define _GLIBCXX_FILESYSTEM
#include <bits/stdc++.h>
#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define int long long
#define S second
#define F first
using namespace std;

//problem link : https://archive.topcoder.com/ProblemStatement/pm/10341
// this problem was about using cross product to find if  a segment intersects a vector 
// we can solve this problem also by finding the equation of the line of sight call it F(x) and then look at all the points between them to check if any of them has height bigger or equal to f(x) 

signed main()
{
    vector<int> vec;
    vec.push_back(-1);
    string x;
    getline(cin,x);
    string num="";
    for(auto c:x)
    {
        if(c==',')
        {
            vec.push_back(stoi(num));
            num="";
            continue;
        }
        num+=c;
    }
vec.push_back(stoll(num));
int n=vec.size()-1;
int best=0;
int idx=-1;
for(int i=1; i<=n; i++)  // brute force the building to stay on
{
    int sum=0;
    for(int j=1; j<=n; j++)   // try looking at building j while standing at build i
    {
        if(j==i)continue;
        bool ok=true;
        for(int k=(j<i)?i-1:i+1 ; k!=j; (j<i)?k--:k++ )   // see if any of the building between i and j cross your line of sight
        {
            int v1x=j-i;
            int v1y=vec[j]-vec[i];
            int v2x =k-i;
            int v2y=vec[k]-vec[i];              // vector v1 is the line of sight from i to j
            int v3x=k-i;                         // vector v2 is the line of sight from roof i to k
            int v3y= 0-vec[i];                   // // vector v3 is the line of sight from roof i to floor of k
            int c1=(v1x*v2y)-(v1y*v2x);
            int c2=(v1x*v3y)-(v1y*v3x);             // calculate cross product to see what is the position of v2 and v2 relative to v1
            if(c1>0 && c2<0)ok=false;                // if v2 and v3 are at different sides then they intersect our line of sight between i and j
            if(c1<0 && c2>0)ok=false;                // if one of them is zero which means it exactly fall in our line of sight so we can't see behind it also
            if(c1==0)ok=false;
        }
        if(ok)sum++;
    }
    if(sum>best)
    {
        best=sum;
        idx=i+1;
    }
}

cout<<best<<"\n";
}


